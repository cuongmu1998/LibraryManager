package myforms;


import dao.impl.LibraryCardDAOImpl;
import database.DBUtility;
import entities.LibraryCard;
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import myclasses.FunctionClass;

/**
 *
 * @author hieu0
 */
public class ManageLibraryCardForm extends javax.swing.JFrame {

    /**
     * Creates new form ManageGenresForm
     */
    DefaultTableModel dftbl;
    public ManageLibraryCardForm() {
        initComponents();
        
        // center the form
        this.setLocationRelativeTo(null);
        
        //display image on the top
        myclasses.FunctionClass func = new FunctionClass();
        func.displayImage(75, 60, "/my_images/libraryCard.png", jLabel_FormTitle);
        
        // add a gray border to the Jpanel
        Border panelHeaderBorder = BorderFactory.createMatteBorder(3, 3, 3, 3, new Color(1, 95, 94));
        jPanel1.setBorder(panelHeaderBorder);
        
        //customize the Jtable
        jTable_LibraryCard.setSelectionBackground(new Color(249, 105, 14));
        jTable_LibraryCard.setSelectionForeground(Color.white);
        jTable_LibraryCard.setRowHeight(25);
        //jTable_Genres.setShowGrid(true);
        jTable_LibraryCard.setBackground(new Color(248,248,248));
        
        //customize the Jtable header row
        jTable_LibraryCard.getTableHeader().setBackground(new Color(42,187,155));
        jTable_LibraryCard.getTableHeader().setForeground(Color.black);
        jTable_LibraryCard.getTableHeader().setFont(new Font("Vardana", Font.BOLD, 13));
        jTable_LibraryCard.getTableHeader().setOpaque(false);
        
        
        
        //Refresh table
        populateJTableWithLibraryCard();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel_FormTitle = new javax.swing.JLabel();
        jLabel_CloseForm = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_Id = new javax.swing.JTextField();
        jButton_Edit_ = new javax.swing.JButton();
        jButton_Delete_ = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_LibraryCard = new javax.swing.JTable();
        jButton_FindById_ = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_Startdate = new com.toedter.calendar.JDateChooser();
        txt_Expdate = new com.toedter.calendar.JDateChooser();
        txt_CardCode = new javax.swing.JTextField();
        jButton_FindByCardCode_ = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_Email = new javax.swing.JTextField();
        txt_Phone = new javax.swing.JTextField();
        txt_Username = new javax.swing.JTextField();
        txt_DoB = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jButton_Add_ = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel_FormTitle.setBackground(new java.awt.Color(1, 95, 94));
        jLabel_FormTitle.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel_FormTitle.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_FormTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_FormTitle.setText("       Manage Library Card");
        jLabel_FormTitle.setOpaque(true);

        jLabel_CloseForm.setBackground(new java.awt.Color(1, 95, 94));
        jLabel_CloseForm.setFont(new java.awt.Font("Verdana", 0, 36)); // NOI18N
        jLabel_CloseForm.setForeground(new java.awt.Color(255, 0, 0));
        jLabel_CloseForm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_CloseForm.setText("x");
        jLabel_CloseForm.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel_CloseForm.setOpaque(true);
        jLabel_CloseForm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_CloseFormMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("ID:");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Start date:");

        txt_Id.setEditable(false);
        txt_Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_IdActionPerformed(evt);
            }
        });

        jButton_Edit_.setBackground(new java.awt.Color(0, 255, 0));
        jButton_Edit_.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_Edit_.setForeground(new java.awt.Color(111, 13, 200));
        jButton_Edit_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my_images/icons8-update-24.png"))); // NOI18N
        jButton_Edit_.setText("Edit");
        jButton_Edit_.setContentAreaFilled(false);
        jButton_Edit_.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Edit_.setOpaque(true);
        jButton_Edit_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Edit_ActionPerformed(evt);
            }
        });

        jButton_Delete_.setBackground(new java.awt.Color(255, 51, 51));
        jButton_Delete_.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_Delete_.setForeground(new java.awt.Color(111, 13, 200));
        jButton_Delete_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my_images/icons8-delete-24.png"))); // NOI18N
        jButton_Delete_.setText("Delete");
        jButton_Delete_.setContentAreaFilled(false);
        jButton_Delete_.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Delete_.setOpaque(true);
        jButton_Delete_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Delete_ActionPerformed(evt);
            }
        });

        jTable_LibraryCard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable_LibraryCard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_LibraryCardMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable_LibraryCard);

        jButton_FindById_.setBackground(new java.awt.Color(0, 255, 0));
        jButton_FindById_.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_FindById_.setForeground(new java.awt.Color(111, 13, 200));
        jButton_FindById_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my_images/icons8-search-24.png"))); // NOI18N
        jButton_FindById_.setText("Find by Id");
        jButton_FindById_.setContentAreaFilled(false);
        jButton_FindById_.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_FindById_.setOpaque(true);
        jButton_FindById_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_FindById_ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Card Code:");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Exp date:");

        txt_Startdate.setDateFormatString("dd/MM/yyyy");

        txt_Expdate.setDateFormatString("dd/MM/yyyy");

        txt_CardCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_CardCodeActionPerformed(evt);
            }
        });

        jButton_FindByCardCode_.setBackground(new java.awt.Color(0, 255, 0));
        jButton_FindByCardCode_.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_FindByCardCode_.setForeground(new java.awt.Color(111, 13, 200));
        jButton_FindByCardCode_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my_images/icons8-search-24.png"))); // NOI18N
        jButton_FindByCardCode_.setText("Find By Card Code");
        jButton_FindByCardCode_.setContentAreaFilled(false);
        jButton_FindByCardCode_.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_FindByCardCode_.setOpaque(true);
        jButton_FindByCardCode_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_FindByCardCode_ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("User Name:");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Email:");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Phone:");

        txt_Email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_EmailActionPerformed(evt);
            }
        });

        txt_Phone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_PhoneActionPerformed(evt);
            }
        });

        txt_Username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_UsernameActionPerformed(evt);
            }
        });

        txt_DoB.setDateFormatString("dd/MM/yyyy");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("DoB:");

        jButton_Add_.setBackground(new java.awt.Color(0, 255, 0));
        jButton_Add_.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_Add_.setForeground(new java.awt.Color(111, 13, 200));
        jButton_Add_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my_images/icons8-add-24.png"))); // NOI18N
        jButton_Add_.setText("Add");
        jButton_Add_.setContentAreaFilled(false);
        jButton_Add_.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Add_.setOpaque(true);
        jButton_Add_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Add_ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel_FormTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_CloseForm, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton_Add_, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(jButton_Edit_, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(jButton_Delete_, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                        .addComponent(jButton_FindById_)
                        .addGap(80, 80, 80)
                        .addComponent(jButton_FindByCardCode_))
                    .addComponent(jScrollPane2))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_Startdate, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                            .addComponent(txt_Expdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_CardCode))
                        .addGap(60, 60, 60)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8))))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_DoB, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                    .addComponent(txt_Email)
                    .addComponent(txt_Phone)
                    .addComponent(txt_Username))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel_FormTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_CloseForm, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_Username, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_CardCode, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_Startdate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txt_DoB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_Email, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_Expdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_Phone, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_FindById_, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_FindByCardCode_, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Edit_, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Delete_)
                    .addComponent(jButton_Add_, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel_CloseFormMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_CloseFormMouseClicked

        // Display DashboardForm
        DashboardForm dash_f = new DashboardForm();
        dash_f.setVisible(true);
        
        // close the form
        this.dispose();
    }//GEN-LAST:event_jLabel_CloseFormMouseClicked

    private void txt_IdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_IdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_IdActionPerformed

    
    private void jButton_Edit_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Edit_ActionPerformed
        // Edit card
        String cardId = txt_Id.getText().trim();
        String cardCode = txt_CardCode.getText().trim();
        String userName = txt_Username.getText().trim();
        Date dob = txt_DoB.getDate();
        String email = txt_Email.getText().trim();
        String phone = txt_Phone.getText().trim();
        Date startDate = txt_Startdate.getDate();
        Date expDate = txt_Expdate.getDate();
        
        // check textfield empty or not
        if (cardId.isEmpty()) {
            JOptionPane.showMessageDialog(null, "this field cannot be empty", "Card Id", 2);
        }
        if (cardCode.isEmpty()) {
            JOptionPane.showMessageDialog(null, "this field cannot be empty", "Card Code", 2);
        }else if (userName.isEmpty()) {
            JOptionPane.showMessageDialog(null, "this field cannot be empty", "User Name", 2);
        }else if (dob == null) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "DoB", 2);
        }else if (email.isEmpty()) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "Email", 2);
        }else if (phone.isEmpty()) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "Phone", 2);
        }else if (startDate==null) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "Start Date", 2);
        } else if (expDate == null) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "Expiry Date", 2);
        }else{
            //Calculate age from date of birth by localdate
            Instant instant = dob.toInstant();
            ZonedDateTime zone = instant.atZone(ZoneId.systemDefault());
            LocalDate givenDate = zone.toLocalDate();
            int years = Period.between(givenDate, LocalDate.now()).getYears();
            if (years < 18) {
                JOptionPane.showMessageDialog(null, "Students must be 18 years old", "Date Of Birth", 2);
            } else if (phone.length() >= 12) {
                JOptionPane.showMessageDialog(null, "Field length must be less than or equal to 11", "Phone", 2);
            } else if (!email.contains("@edu.vn")) {
                JOptionPane.showMessageDialog(null, "Email must be in the format @.edu.vn", "Email", 2);
            }else if (startDate.after(Calendar.getInstance().getTime())) {
                JOptionPane.showMessageDialog(null, "The start date must be less than current date", "Start Date", 2);
            }else if(startDate.compareTo(expDate)>0){
                JOptionPane.showMessageDialog(null, "The expiry date must be greater than start date", "Expiry Date", 2); 
            } else{
                int id = Integer.parseInt(cardId);
                LibraryCard card = new LibraryCard();
                card.setId(id);
                card.setCardCode(cardCode);
                card.setUserName(userName);
                card.setdOB(dob);
                card.setEmail(email);
                card.setPhone(phone);
                card.setStartDate(startDate);
                card.setExpireDate(expDate);
                boolean bl = new LibraryCardDAOImpl().updateCard(card);
                if (bl) {
                    JOptionPane.showMessageDialog(this, "Update successful");
                    //refresh Jtable
                    populateJTableWithLibraryCard();

                    //clear text from the textfield
                    txt_Id.setText("");
                    txt_CardCode.setText("");
                    txt_Username.setText("");
                    txt_DoB.setDate(null);
                    txt_Email.setText("");
                    txt_Phone.setText("");
                    txt_Startdate.setDate(null);
                    txt_Expdate.setDate(null);
                }else{
                    JOptionPane.showMessageDialog(null, "Add not successful", "Add", 2);
                }
            }
        }
    }//GEN-LAST:event_jButton_Edit_ActionPerformed
    
    private void jButton_Delete_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Delete_ActionPerformed
        // TODO add your handling code here:
        try {
                int id = Integer.parseInt(txt_Id.getText());
                boolean bl = new LibraryCardDAOImpl().deleteCard(id);
                if (bl) {
                    JOptionPane.showMessageDialog(this, "Delete successful");
                    //refresh Jtable
                    populateJTableWithLibraryCard();
                }
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showConfirmDialog(this, "Invalid library card id", "Error", 0);
            }
    }//GEN-LAST:event_jButton_Delete_ActionPerformed

    private void jTable_LibraryCardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_LibraryCardMouseClicked
        try {
            // Display the selected LibraryCard
            int index =  jTable_LibraryCard.getSelectedRow();
            //get values
            String id = jTable_LibraryCard.getValueAt(index, 0).toString();
            String cardCode = jTable_LibraryCard.getValueAt(index, 1).toString();
            String userName = jTable_LibraryCard.getValueAt(index, 2).toString();
            String dob = jTable_LibraryCard.getValueAt(index, 3).toString();
            String email = jTable_LibraryCard.getValueAt(index, 4).toString();
            String phone = jTable_LibraryCard.getValueAt(index, 5).toString();
            String startdate = jTable_LibraryCard.getValueAt(index, 6).toString();
            String expdate = jTable_LibraryCard.getValueAt(index, 7).toString();
            
            //show data in textfield
            txt_Id.setText(id);
            txt_CardCode.setText(cardCode);
            txt_Username.setText(userName);
            txt_Email.setText(email);
            txt_Phone.setText(phone);
            SimpleDateFormat sf = new SimpleDateFormat("dd/MM/yyyy");
            txt_DoB.setDate(sf.parse(dob));
            txt_Startdate.setDate(sf.parse(startdate));
            txt_Expdate.setDate(sf.parse(expdate));
        } catch (ParseException ex) {
            Logger.getLogger(ManageLibraryCardForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTable_LibraryCardMouseClicked

    private void jButton_FindById_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_FindById_ActionPerformed
        // TODO add your handling code here:
        String strId = JOptionPane.showInputDialog("Enter Id!");
        if (strId!=null && strId.length()>0) {
            try {
                int cardId = Integer.parseInt(strId);
                LibraryCard card = new LibraryCardDAOImpl().getCardById(cardId);
                if (card!=null) {
                    txt_Id.setText(card.getId()+"");
                    txt_CardCode.setText(card.getCardCode());
                    txt_Startdate.setDate(card.getStartDate());
                    txt_Expdate.setDate(card.getExpireDate());
                }else{
                    JOptionPane.showMessageDialog(this, "Invalid id "+strId, "Error", 0);
                }
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showConfirmDialog(this, e.getMessage());
            }
        }
    }//GEN-LAST:event_jButton_FindById_ActionPerformed

    private void txt_CardCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_CardCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_CardCodeActionPerformed

    private void jButton_FindByCardCode_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_FindByCardCode_ActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat sf = new SimpleDateFormat("dd/MM/yyyy");
        String strCardCode = JOptionPane.showInputDialog("Enter Card Code");
        if (strCardCode!=null && strCardCode.length()>0) {
            List<LibraryCard> list = new LibraryCardDAOImpl().getCardByCardCode(strCardCode);
            if (list==null || list.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Invalid Name "+strCardCode, "Error", 0);
            }else{
                //Jtable column
                String [] colNames = {"ID", "Card Code", "Startdate", "Expdate"};

                //rows
                Object[][] rows = new Object[list.size()][colNames.length];
                for (int i = 0; i < list.size(); i++) {
                    rows[i][0] = list.get(i).getId();
                    rows[i][1] = list.get(i).getCardCode();
                    rows[i][2] = sf.format(list.get(i).getStartDate());
                    rows[i][3] = sf.format(list.get(i).getExpireDate());
                }
                dftbl = new DefaultTableModel(rows, colNames);
                jTable_LibraryCard.setModel(dftbl);
            }
        }
    }//GEN-LAST:event_jButton_FindByCardCode_ActionPerformed

    private void txt_EmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_EmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_EmailActionPerformed

    private void txt_PhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_PhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_PhoneActionPerformed

    private void txt_UsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_UsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_UsernameActionPerformed

    private void jButton_Add_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Add_ActionPerformed
        // add new Card
        String cardCode = txt_CardCode.getText().trim();
        String userName = txt_Username.getText().trim();
        Date dob = txt_DoB.getDate();
        String email = txt_Email.getText().trim();
        String phone = txt_Phone.getText().trim();
        Date startDate = txt_Startdate.getDate();
        Date expDate = txt_Expdate.getDate();

        // check textfield empty or not
        if (cardCode.isEmpty()) {
            JOptionPane.showMessageDialog(null, "this field cannot be empty", "Card Code", 2);
        }else if (userName.isEmpty()) {
            JOptionPane.showMessageDialog(null, "this field cannot be empty", "User Name", 2);
        }else if (dob == null) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "DoB", 2);
        }else if (email.isEmpty()) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "Email", 2);
        }else if (phone.isEmpty()) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "Phone", 2);
        }else if (startDate==null) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "Start Date", 2);
        } else if (expDate == null) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "Expiry Date", 2);
        }else{
            //Calculate age from date of birth by localdate
            Instant instant = dob.toInstant();
            ZonedDateTime zone = instant.atZone(ZoneId.systemDefault());
            LocalDate givenDate = zone.toLocalDate();
            int years = Period.between(givenDate, LocalDate.now()).getYears();
            if (years < 18) {
                JOptionPane.showMessageDialog(null, "Students must be 18 years old", "Date Of Birth", 2);
            } else if (phone.length() >= 12) {
                JOptionPane.showMessageDialog(null, "Field length must be less than or equal to 11", "Phone", 2);
            } else if (!email.contains("@edu.vn")) {
                JOptionPane.showMessageDialog(null, "Email must be in the format @.edu.vn", "Email", 2);
            }else if (startDate.after(Calendar.getInstance().getTime())) {
                JOptionPane.showMessageDialog(null, "The start date must be less than current date", "Start Date", 2);
            }else if(startDate.compareTo(expDate)>0){
                JOptionPane.showMessageDialog(null, "The expiry date must be greater than start date", "Expiry Date", 2);
            } else{
                Connection conn;
                ResultSet rs = null;
                PreparedStatement ps = null;
                conn = DBUtility.openConnetion();
                String selectQuery = "select * from tblLibraryCard where CardCode = '"+cardCode+"'";
                try {
                    ps = conn.prepareStatement(selectQuery);
                    rs = ps.executeQuery();
                    if (rs.next()) {
                        JOptionPane.showMessageDialog(null, "Already exist Card Code: " + cardCode, "Card Code", HEIGHT);
                    } else{
                        LibraryCard card = new LibraryCard();
                        card.setCardCode(cardCode);
                        card.setUserName(userName);
                        card.setdOB(dob);
                        card.setEmail(email);
                        card.setPhone(phone);
                        card.setStartDate(startDate);
                        card.setExpireDate(expDate);
                        boolean bl = new LibraryCardDAOImpl().insertCard(card);
                        if (bl) {
                            JOptionPane.showMessageDialog(this, "Insert successful");
                            //refresh Jtable
                            populateJTableWithLibraryCard();

                            //clear text from the textfield
                            txt_Id.setText("");
                            txt_CardCode.setText("");
                            txt_Username.setText("");
                            txt_DoB.setDate(null);
                            txt_Email.setText("");
                            txt_Phone.setText("");
                            txt_Startdate.setDate(null);
                            txt_Expdate.setDate(null);
                        }else{
                            JOptionPane.showMessageDialog(null, "Add not successful", "Add", 2);
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(ManageLibraryCardForm.class.getName()).log(Level.SEVERE, null, ex);
                }finally{
                    DBUtility.closeAllPs(conn, ps, rs);
                }
            }
        }
    }//GEN-LAST:event_jButton_Add_ActionPerformed
        
    //create a function to populate the jTable with LibraryCard
    public void populateJTableWithLibraryCard(){
        SimpleDateFormat sf = new SimpleDateFormat("dd/MM/yyyy");
        List<LibraryCard> list = new LibraryCardDAOImpl().getCardList();
        
        //Jtable column
        String [] colNames = {"ID", "Card Code", "User Name", "DoB", "Email", "Phone", "Startdate", "Expdate"};
        
        //rows
        Object[][] rows = new Object[list.size()][colNames.length];
        for (int i = 0; i < list.size(); i++) {
            rows[i][0] = list.get(i).getId();
            rows[i][1]= list.get(i).getCardCode();
            rows[i][2]= list.get(i).getUserName();
            rows[i][3] = sf.format(list.get(i).getdOB());
            rows[i][4]= list.get(i).getEmail();
            rows[i][5]= list.get(i).getPhone();
            rows[i][6] = sf.format(list.get(i).getStartDate());
            rows[i][7] = sf.format(list.get(i).getExpireDate());
        }
        dftbl = new DefaultTableModel(rows, colNames);
        jTable_LibraryCard.setModel(dftbl);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    //javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageLibraryCardForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageLibraryCardForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageLibraryCardForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageLibraryCardForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageLibraryCardForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Add_;
    private javax.swing.JButton jButton_Delete_;
    private javax.swing.JButton jButton_Edit_;
    private javax.swing.JButton jButton_FindByCardCode_;
    private javax.swing.JButton jButton_FindById_;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel_CloseForm;
    private javax.swing.JLabel jLabel_FormTitle;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable_LibraryCard;
    private javax.swing.JTextField txt_CardCode;
    private com.toedter.calendar.JDateChooser txt_DoB;
    private javax.swing.JTextField txt_Email;
    private com.toedter.calendar.JDateChooser txt_Expdate;
    private javax.swing.JTextField txt_Id;
    private javax.swing.JTextField txt_Phone;
    private com.toedter.calendar.JDateChooser txt_Startdate;
    private javax.swing.JTextField txt_Username;
    // End of variables declaration//GEN-END:variables
}
