package myforms;

import dao.impl.LibraryCardDAOImpl;
import dao.impl.UserDAOImpl;
import entities.LibraryCard;
import entities.User;
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import myclasses.FunctionClass;

/**
 *
 * @author hieu0
 */
public class ManageUserForm extends javax.swing.JFrame {

    /**
     * Creates new form ManageGenresForm
     */
    DefaultTableModel dftbl;

    public ManageUserForm() {
        initComponents();
        //dftbl = (DefaultTableModel) jTable_User_.getModel();
        // center the form
        this.setLocationRelativeTo(null);

        //display image on the top
        myclasses.FunctionClass func = new FunctionClass();
        func.displayImage(75, 60, "/my_images/user.png", jLabel_FormTitle);

        // add a gray border to the Jpanel
        Border panelHeaderBorder = BorderFactory.createMatteBorder(3, 3, 3, 3, new Color(71, 54, 218));
        jPanel1.setBorder(panelHeaderBorder);

        //customize the Jtable
        jTable_User_.setSelectionBackground(new Color(249, 105, 14));
        jTable_User_.setSelectionForeground(Color.white);
        jTable_User_.setRowHeight(25);
        //jTable_Genres.setShowGrid(true);
        jTable_User_.setBackground(new Color(248, 248, 248));

        //customize the Jtable header row
        jTable_User_.getTableHeader().setBackground(new Color(42, 187, 155));
        jTable_User_.getTableHeader().setForeground(Color.white);
        jTable_User_.getTableHeader().setFont(new Font("Vardana", Font.BOLD, 13));
        jTable_User_.getTableHeader().setOpaque(false);

        //Refresh table
        populateJTableWithUser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel_FormTitle = new javax.swing.JLabel();
        jLabel_CloseForm = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_Id = new javax.swing.JTextField();
        jButton_Add_ = new javax.swing.JButton();
        jButton_Edit_ = new javax.swing.JButton();
        jButton_Delete_ = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_User_ = new javax.swing.JTable();
        jButton_FindById_ = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_DoB = new com.toedter.calendar.JDateChooser();
        txt_Name = new javax.swing.JTextField();
        txt_Phone = new javax.swing.JTextField();
        txt_Email = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        combo_CardCode = new javax.swing.JComboBox<>();
        jButton_FindByName_ = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel_FormTitle.setBackground(new java.awt.Color(71, 54, 218));
        jLabel_FormTitle.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel_FormTitle.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_FormTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_FormTitle.setText("       Manage Users");
        jLabel_FormTitle.setOpaque(true);

        jLabel_CloseForm.setBackground(new java.awt.Color(71, 54, 218));
        jLabel_CloseForm.setFont(new java.awt.Font("Verdana", 0, 36)); // NOI18N
        jLabel_CloseForm.setForeground(new java.awt.Color(255, 0, 0));
        jLabel_CloseForm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_CloseForm.setText("x");
        jLabel_CloseForm.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel_CloseForm.setOpaque(true);
        jLabel_CloseForm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_CloseFormMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("ID:");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("User Name:");

        txt_Id.setEditable(false);
        txt_Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_IdActionPerformed(evt);
            }
        });

        jButton_Add_.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_Add_.setText("Add");
        jButton_Add_.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Add_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Add_ActionPerformed(evt);
            }
        });

        jButton_Edit_.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_Edit_.setText("Edit");
        jButton_Edit_.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Edit_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Edit_ActionPerformed(evt);
            }
        });

        jButton_Delete_.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_Delete_.setText("Delete");
        jButton_Delete_.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Delete_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Delete_ActionPerformed(evt);
            }
        });

        jTable_User_.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable_User_.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_User_MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable_User_);

        jButton_FindById_.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_FindById_.setText("Find by Id");
        jButton_FindById_.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_FindById_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_FindById_ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Phone:");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Date of Birth:");

        txt_DoB.setDateFormatString("dd/MM/yyyy");

        txt_Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_NameActionPerformed(evt);
            }
        });

        txt_Phone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_PhoneActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Email:");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Card ID:");

        combo_CardCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_CardCodeActionPerformed(evt);
            }
        });

        jButton_FindByName_.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_FindByName_.setText("Find by Name");
        jButton_FindByName_.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_FindByName_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_FindByName_ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButton_Add_, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(jButton_Edit_, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                        .addComponent(jButton_Delete_, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(jButton_FindById_, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(jButton_FindByName_))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_Phone)
                            .addComponent(txt_DoB, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(combo_CardCode, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_Name)
                            .addComponent(txt_Email))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel_FormTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_CloseForm, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel_FormTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_CloseForm, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(combo_CardCode, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_DoB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_Phone, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_Email, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Edit_)
                    .addComponent(jButton_Delete_)
                    .addComponent(jButton_FindById_)
                    .addComponent(jButton_Add_)
                    .addComponent(jButton_FindByName_))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel_CloseFormMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_CloseFormMouseClicked

        // close the form
        this.dispose();
    }//GEN-LAST:event_jLabel_CloseFormMouseClicked

    private void txt_IdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_IdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_IdActionPerformed

    private void jButton_Add_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Add_ActionPerformed
        // add new Use

        List<LibraryCard> listLib = new LibraryCardDAOImpl().getCardList();
        String user_name = txt_Name.getText().trim();
        Date dOB = txt_DoB.getDate();
        String phone = txt_Phone.getText().trim();
        String email = txt_Email.getText().trim();
        LibraryCard lib = listLib.get(combo_CardCode.getSelectedIndex());
        int cardId = lib.getId();
        // check textfield empty or not
        if (user_name.isEmpty()) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "User Name", 2);
        } else if (dOB == null) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "Date Of Birth", 2);
        } else if (phone.isEmpty()) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "Phone", 2);
        } else if (email.isEmpty()) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "Email", 2);
        } else {
            //Calculate age from date of birth by localdate
            Instant instant = dOB.toInstant();
            ZonedDateTime zone = instant.atZone(ZoneId.systemDefault());
            LocalDate givenDate = zone.toLocalDate();
            int years = Period.between(givenDate, LocalDate.now()).getYears();
            if (years < 18) {
                JOptionPane.showMessageDialog(null, "Students must be 18 years old", "Date Of Birth", 2);
            } else if (phone.length() >= 12) {
                JOptionPane.showMessageDialog(null, "Field length must be less than or equal to 11", "Phone", 2);
            } else if (!email.contains("@edu.vn")) {
                JOptionPane.showMessageDialog(null, "Email must be in the format @.edu.vn", "Email", 2);
            } else {
                User user = new User();
                user.setName(user_name);
                user.setCardId(cardId);
                user.setDateOfBirth(dOB);
                user.setPhone(phone);
                user.setEmail(email);
                boolean bl = new UserDAOImpl().insertUser(user);
                if (bl) {
                    JOptionPane.showMessageDialog(this, "Insert successful");
                    //refresh Jtable
                    populateJTableWithUser();

                    //clear text from the textfield
                    txt_Id.setText("");
                    combo_CardCode.setSelectedIndex(-1);
                    txt_DoB.setDate(null);
                    txt_Name.setText("");
                    txt_Phone.setText("");
                    txt_Email.setText("");
                } else {
                    JOptionPane.showMessageDialog(null, "Add not successful", "Add", 2);
                }
            }
        }
    }//GEN-LAST:event_jButton_Add_ActionPerformed

    private void jButton_Edit_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Edit_ActionPerformed
        // Edit card
        List<LibraryCard> listLib = new LibraryCardDAOImpl().getCardList();
        String id = txt_Id.getText().trim();
        String user_name = txt_Name.getText().trim();
        Date dOB = txt_DoB.getDate();
        String phone = txt_Phone.getText().trim();
        String email = txt_Email.getText().trim();
        LibraryCard lib = listLib.get(combo_CardCode.getSelectedIndex());
        int cardId = lib.getId();
        // check textfield empty or not
        if (user_name.isEmpty()) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "User Name", 2);
        } else if (dOB == null) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "Date Of Birth", 2);
        } else if (phone.isEmpty()) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "Phone", 2);
        } else if (email.isEmpty()) {
            JOptionPane.showMessageDialog(null, "This field cannot be empty", "Email", 2);
        } else {
                //Calculate age from date of birth by localdate
                Instant instant = dOB.toInstant();
                ZonedDateTime zone = instant.atZone(ZoneId.systemDefault());
                LocalDate givenDate = zone.toLocalDate();
                int years = Period.between(givenDate, LocalDate.now()).getYears();
                if (years < 18) {
                    JOptionPane.showMessageDialog(null, "Students must be 18 years old", "Date Of Birth", 2);
                } else if (phone.length() >= 12) {
                    JOptionPane.showMessageDialog(null, "Field length must be less than or equal to 11", "Phone", 2);
                } else if (!email.contains("@edu.vn")) {
                    JOptionPane.showMessageDialog(null, "Email must be in the format @.edu.vn", "Email", 2);
                } else {
                //Calculate age from date of birth by localdate            
                User user = new User();
                user.setUserId(Integer.parseInt(id));
                user.setCardId(cardId);
                user.setName(user_name);
                user.setDateOfBirth(dOB);
                user.setPhone(phone);
                user.setEmail(email);
                boolean bl = new UserDAOImpl().updateUser(user);
                if (bl) {
                    JOptionPane.showMessageDialog(this, "Edit successful");
                    //refresh Jtable
                    populateJTableWithUser();

                    //clear text from the textfield
                    txt_Id.setText("");
                    combo_CardCode.setSelectedIndex(-1);
                    txt_DoB.setDate(null);
                    txt_Name.setText("");
                    txt_Phone.setText("");
                    txt_Email.setText("");
                } else {
                    JOptionPane.showMessageDialog(null, "Edit not successful", "Add", 2);
                }
            }
        }
    }//GEN-LAST:event_jButton_Edit_ActionPerformed

    private void jButton_Delete_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Delete_ActionPerformed
        // TODO add your handling code here:
        try {
                int id = Integer.parseInt(txt_Id.getText());
                boolean bl = new UserDAOImpl().deleteUser(id);
                if (bl) {
                    JOptionPane.showMessageDialog(this, "Delete successful");
                    //refresh Jtable
                    populateJTableWithUser();
                }
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showConfirmDialog(this, "Invalid user id", "Error", 0);
            }
    }//GEN-LAST:event_jButton_Delete_ActionPerformed

    private void jTable_User_MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_User_MouseClicked
        // Display the selected LibraryCard
        int index =  jTable_User_.getSelectedRow();
        
        //get values
        String id = jTable_User_.getValueAt(index, 0).toString();
        String user_name = jTable_User_.getValueAt(index, 1).toString();
        String cardCode = jTable_User_.getValueAt(index, 2).toString();
        String dob = jTable_User_.getValueAt(index, 3).toString();
        String phone = jTable_User_.getValueAt(index, 4).toString();
        String email = jTable_User_.getValueAt(index, 5).toString();
        
        //show data in textfield
        SimpleDateFormat sf = new SimpleDateFormat("dd/MM/yyyy");
        txt_Id.setText(id);
        txt_Name.setText(user_name);
        combo_CardCode.setSelectedItem(cardCode);
        try {
            txt_DoB.setDate(sf.parse(dob));
        } catch (ParseException ex) {
            Logger.getLogger(ManageUserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        txt_Phone.setText(phone);
        txt_Email.setText(email);
    }//GEN-LAST:event_jTable_User_MouseClicked

    private void jButton_FindById_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_FindById_ActionPerformed
        // TODO add your handling code here:
        String strId = JOptionPane.showInputDialog("Enter Id!");
        if (strId!=null && strId.length()>0) {
            try {
                int userId = Integer.parseInt(strId);
                User user = new UserDAOImpl().getUserById(userId);
                if (user!=null) {
                    txt_Id.setText(user.getUserId()+"");
                    txt_Name.setText(user.getName()+"");
                    combo_CardCode.setSelectedItem(user.getCardCode());
                    SimpleDateFormat sf = new SimpleDateFormat("dd/MM/yyyy");
                    txt_DoB.setDate(user.getDateOfBirth());
                    txt_Phone.setText(user.getPhone()+"");
                    txt_Email.setText(user.getEmail()+"");
                }else{
                    JOptionPane.showMessageDialog(this, "Invalid id "+strId, "Error", 0);
                }
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showConfirmDialog(this, e.getMessage());
            }
        }
    }//GEN-LAST:event_jButton_FindById_ActionPerformed

    private void jButton_FindByName_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_FindByName_ActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat sf = new SimpleDateFormat("dd/MM/yyyy");
        String name = JOptionPane.showInputDialog("Enter Name");
        if (name!=null && name.length()>0) {
            List<User> listUser = new UserDAOImpl().getUserByName(name);
            if (listUser==null || listUser.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Invalid Name "+name, "Error", 0);
            }else{
                //Jtable column
                String [] colNames = {"ID", "User Name", "Card Code", "Date Of Birth", "Phone", "Email"};

                //rows
                Object[][] rows = new Object[listUser.size()][colNames.length];
                for (int i = 0; i < listUser.size(); i++) {
                    rows[i][0] = listUser.get(i).getUserId();
                    rows[i][1] = listUser.get(i).getName();
                    rows[i][2] = listUser.get(i).getCardCode();
                    rows[i][3] = sf.format(listUser.get(i).getDateOfBirth());
                    rows[i][4] = listUser.get(i).getPhone();
                    rows[i][5] = listUser.get(i).getEmail();
                }
                dftbl = new DefaultTableModel(rows, colNames);
                jTable_User_.setModel(dftbl);
            }
        }
    }//GEN-LAST:event_jButton_FindByName_ActionPerformed

    private void txt_NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_NameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_NameActionPerformed

    private void txt_PhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_PhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_PhoneActionPerformed

    private void combo_CardCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_CardCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_CardCodeActionPerformed
        
    //create a function to populate the jTable with LibraryCard
    public void populateJTableWithUser(){
        SimpleDateFormat sf = new SimpleDateFormat("dd/MM/yyyy");
        List<LibraryCard> listLib = new LibraryCardDAOImpl().getCardList();
        List<User> listUser = new UserDAOImpl().getUserList();
        
        //Jtable column
        String [] colNames = {"ID", "User Name", "Card Code", "Date Of Birth", "Phone", "Email"};
        DefaultComboBoxModel<String> cbm = (DefaultComboBoxModel<String>) combo_CardCode.getModel();
        for (LibraryCard cardcode : listLib) {
            cbm.addElement(cardcode.getCardCode());
        }
        //rows
        Object[][] rows = new Object[listUser.size()][colNames.length];
        for (int i = 0; i < listUser.size(); i++) {
            rows[i][0] = listUser.get(i).getUserId();
            rows[i][1] = listUser.get(i).getName();
            rows[i][2] = listUser.get(i).getCardCode();
            rows[i][3] = sf.format(listUser.get(i).getDateOfBirth());
            rows[i][4] = listUser.get(i).getPhone();
            rows[i][5] = listUser.get(i).getEmail();
        }
        dftbl = new DefaultTableModel(rows, colNames);
        jTable_User_.setModel(dftbl);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    //javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
                    break;
                

}
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageUserForm.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageUserForm.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageUserForm.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageUserForm.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageUserForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> combo_CardCode;
    private javax.swing.JButton jButton_Add_;
    private javax.swing.JButton jButton_Delete_;
    private javax.swing.JButton jButton_Edit_;
    private javax.swing.JButton jButton_FindById_;
    private javax.swing.JButton jButton_FindByName_;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel_CloseForm;
    private javax.swing.JLabel jLabel_FormTitle;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable_User_;
    private com.toedter.calendar.JDateChooser txt_DoB;
    private javax.swing.JTextField txt_Email;
    private javax.swing.JTextField txt_Id;
    private javax.swing.JTextField txt_Name;
    private javax.swing.JTextField txt_Phone;
    // End of variables declaration//GEN-END:variables
}
